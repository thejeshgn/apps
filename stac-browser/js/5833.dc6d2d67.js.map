{"version":3,"file":"js/5833.dc6d2d67.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/utils.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/object.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/http.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/mediatypes.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/reference.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/link.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/hypermedia.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/apicollection.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/asset.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/stac.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/cataloglike.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/catalog.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/datetime.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/geo.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/collection.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/collectioncollection.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/item.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/itemcollection.js","webpack://@radiantearth/stac-browser/./node_modules/stac-js/src/index.js"],"sourcesContent":["/**\n * Checks whether a variable is a string and contains at least one character.\n * \n * @param {*} string - A variable to check.\n * @returns {boolean} - `true` is the given variable is an string with length > 0, `false` otherwise.\n */\nexport function hasText(string) {\n  return (typeof string === 'string' && string.length > 0);\n}\n\n/**\n * Checks whether a variable is a real object or not.\n * \n * This is a more strict version of `typeof x === 'object'` as this example would also succeeds for arrays and `null`.\n * This function only returns `true` for real objects and not for arrays, `null` or any other data types.\n * \n * @param {*} obj - A variable to check.\n * @returns {boolean} - `true` is the given variable is an object, `false` otherwise.\n */\nexport function isObject(obj) {\n  return (typeof obj === 'object' && obj === Object(obj) && !Array.isArray(obj));\n}\n\n/**\n * Merges any number of arrays of objects.\n * \n * @param  {...Array.<Object>} bands \n * @returns {Array.<Object>}\n */\nexport function mergeArraysOfObjects(...bands) {\n  bands = bands.filter(arr => Array.isArray(arr));\n  if (bands.length > 1) {\n    let length = Math.max(...bands.map(arr => arr.length));\n    let merged = [];\n    for(let i = 0; i < length; i++) {\n      merged.push(Object.assign({}, ...bands.map(band => band[i])));\n    }\n    return merged;\n  }\n  else if (bands.length === 1) {\n    return bands[0];\n  }\n  return [];\n}\n\n/**\n * Get minimum values for the STAC data types.\n * \n * Currently only supports int types.\n * \n * @private\n * @todo Add float support\n * @param {string} str Data type\n * @returns {number|null} Minimum value\n */\nexport function getMinForDataType(str) {\n  switch(str) {\n    case \"int8\":\n      return -128;\n    case \"int16\":\n      return -32768;\n    case \"int32\":\n      return -2147483648;\n  }\n  if (str.startsWith(\"u\")) {\n    return 0;\n  }\n  return null;\n}\n\n/**\n * Get maximum values for the STAC data types.\n * \n * Currently only supports int types.\n * \n * @private\n * @todo Add float support\n * @param {string} str Data type\n * @returns {number|null} Maximum value\n */\nexport function getMaxForDataType(str) {\n  switch(str) {\n    case \"int8\":\n      return 127;\n    case \"uint8\":\n      return 255;\n    case \"int16\":\n      return 32767;\n    case \"uint16\":\n      return 65535;\n    case \"int32\":\n      return 2147483647;\n    case \"uint32\":\n      return 4294967295;\n  }\n  return null;\n}\n","import { isObject } from './utils.js';\n\n/**\n * Base class for STAC objects.\n * \n * Don't instantiate this class!\n * \n * @interface\n * @param {Object} data The STAC object\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass STACObject {\n\n  constructor(data, keyMap = {}, privateKeys = []) {\n    if (!isObject(data)) {\n      throw new Error('Given data is not an object');\n    }\n\n    if (data instanceof STACObject) {\n      for(let key of privateKeys) {\n        this[key] = data[key];\n      }\n      data = data.toJSON();\n    }\n\n    // Map with functions that convert properties to stac-js objects\n    this._keyMap = keyMap;\n    // Array with keys that are used internally and should be cloned\n    this._privateKeys = ['_keyMap', '_privateKeys'].concat(privateKeys);\n\n    // Assign the data to the object\n    for (let key in data) {\n      if (typeof this[key] === 'undefined') {\n        if (key in keyMap) {\n          this[key] = keyMap[key](data[key], this);\n        }\n        else {\n          this[key] = data[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * Check whether this given object is a STAC Item.\n   * \n   * @returns {boolean} `true` if the object is a STAC Item, `false` otherwise.\n   */\n  isItem() {\n    return this.type === 'Feature';\n  }\n\n  /**\n   * Check whether this given object is a STAC Catalog.\n   * \n   * @returns {boolean} `true` if the object is a STAC Catalog, `false` otherwise.\n   */\n  isCatalog() {\n    return this.type === 'Catalog';\n  }\n\n  /**\n   * Check whether this given object is \"catalog-like\", i.e. a Catalog or Collection.\n   * \n   * @returns {boolean} `true` if the object is a \"catalog-like\", `false` otherwise.\n   */\n  isCatalogLike() {\n    return this.isCatalog() || this.isCollection();\n  }\n\n  /**\n   * Check whether this given object is a STAC Collection.\n   * \n   * @returns {boolean} `true` if the object is a STAC Collection, `false` otherwise.\n   */\n  isCollection() {\n    return this.type === 'Collection';\n  }\n\n  /**\n   * Check whether this given object is a STAC ItemCollection.\n   * \n   * @returns {boolean} `true` if the object is a STAC ItemCollection, `false` otherwise.\n   */\n  isItemCollection() {\n    return this.type === 'FeatureCollection';\n  }\n\n  /**\n   * Check whether this given object is a STAC Collection of Collections (i.e. API Collections).\n   * \n   * @returns {boolean} `true` if the object is a STAC CollectionCollection, `false` otherwise.\n   */\n  isCollectionCollection() {\n    return false;\n  }\n\n  /**\n   * Check whether this given object is a STAC Asset.\n   * \n   * @returns {boolean} `true` if the object is a STAC Asset, `false` otherwise.\n   */\n  isAsset() {\n    return false;\n  }\n\n  /**\n   * Check whether this given object is a STAC LInk.\n   * \n   * @returns {boolean} `true` if the object is a STAC Link, `false` otherwise.\n   */\n  isLink() {\n    return false;\n  }\n\n  /**\n   * Returns the type of the STAC object.\n   * \n   * One of:\n   * - Asset\n   * - Catalog\n   * - Collection\n   * - CollectionCollection\n   * - Item\n   * - ItemCollection\n   * - Link\n   * @abstract\n   * @returns {string}\n   */\n  getObjectType() {\n    return;\n  }\n\n  /**\n   * Gets the absolute URL of the STAC entity (if provided explicitly or available from the self link).\n   * \n   * @returns {string|null} Absolute URL\n   */\n  getAbsoluteUrl() {\n    return null;\n  }\n\n  /**\n   * Returns the metadata for the STAC entity.\n   * \n   * @param {string} field Field name\n   * @returns {*}\n   */\n  getMetadata(field) {\n    return this[field];\n  }\n\n  /**\n   * Returns a GeoJSON Feature or FeatureCollection for this STAC object.\n   * \n   * @returns {Object|null} GeoJSON object or `null`\n   */\n  toGeoJSON() {\n    return null;\n  }\n\n  /**\n   * Returns a single bounding box for the STAC entity.\n   * \n   * @returns {BoundingBox|null}\n   */\n  getBoundingBox() {\n    return null;\n  }\n\n  /**\n   * Returns a list of bounding boxes for the STAC entity.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getBoundingBoxes() {\n    return [];\n  }\n\n  /**\n   * Returns a plain object for JSON export.\n   * \n   * @returns {Object} Plain object\n   */\n  toJSON() {\n    let obj = {};\n    Object.keys(this).forEach(key => {\n      if (typeof this[key] === 'function' || this._privateKeys.includes(key)) {\n        return;\n      }\n      let v = this[key];\n      if (key in this._keyMap) {\n        let v2 = Array.isArray(v) ? [] : {};\n        for(let key in v) {\n          v2[key] = v[key].toJSON();\n        }\n        v = v2;\n      }\n      obj[key] = v;\n    });\n    return obj;\n  }\n  \n}\n\nexport default STACObject;\n","import URI from 'urijs';\n\n/**\n * Protocols supported by browsers (http and https).\n * \n * @type {Array.<string>}\n */\nexport const browserProtocols = [\n  'http',\n  'https'\n];\n\n/**\n * Checks whether a URI is a GDAL Virtual Filesystem URI.\n * \n * Such an URI usually starts with `/vsi` (except for `/vsicurl/`).\n * \n * @param {string} href \n * @returns {boolean} `true` if an GDAL Virtual Filesystem URI, `false` otherwise.\n */\nexport function isGdalVfsUri(href) {\n  return typeof href === 'string' && href.startsWith('/vsi') && !href.startsWith('/vsicurl/');\n}\n\n/**\n * \n * @todo\n * @param {string} href \n * @param {string} baseUrl \n * @param {boolean} stringify \n * @returns {string|URI}\n */\nexport function toAbsolute(href, baseUrl, stringify = true) {\n  return normalizeUri(href, baseUrl, false, stringify);\n}\n\n/**\n * \n * @todo\n * @param {string} href \n * @param {string|null} baseUrl \n * @param {boolean} noParams \n * @param {boolean} stringify \n * @returns {string|URI}\n */\nexport function normalizeUri(href, baseUrl = null, noParams = false, stringify = true) {\n  // Convert vsicurl URLs to normal URLs\n  if (typeof href === 'string' && href.startsWith('/vsicurl/')) {\n    href = href.replace(/^\\/vsicurl\\//, '');\n  }\n  // Parse URL and make absolute, if required\n  let uri = URI(href);\n  if (baseUrl && uri.is(\"relative\") && !isGdalVfsUri(href)) { // Don't convert GDAL VFS URIs: https://github.com/radiantearth/stac-browser/issues/116\n    // Avoid that baseUrls that have a . in the last parth part will be removed (e.g. https://example.com/api/v1.0 )\n    let baseUri = URI(baseUrl);\n    let baseUriPath = baseUri.path();\n    if (!baseUriPath.endsWith('/') && !baseUriPath.endsWith('.json')) {\n      baseUri.path(baseUriPath + '/');\n    }\n    uri = uri.absoluteTo(baseUri);\n  }\n  // Normalize URL and remove trailing slash from path\n  // to avoid handling the same resource twice\n  uri.normalize();\n  if (noParams) {\n    uri.query(\"\");\n    uri.fragment(\"\");\n  }\n  return stringify ? uri.toString() : uri;\n}\n","/**\n * The GeoJSON media type.\n * \n * @type {string}\n */\nexport const geojsonMediaType = 'application/geo+json';\n\n/**\n * All STAC media types (JSON + GeoJSON).\n * \n * @type {Array.<string>}\n */\nexport const stacMediaTypes = [\n  'application/json',\n  geojsonMediaType,\n  'text/json'\n];\n\n/**\n * All image media types that Web Browsers can show (GIF, JPEG, PNG, WebP).\n * \n * @type {Array.<string>}\n */\nexport const browserImageTypes = [\n  'image/gif',\n  'image/jpeg',\n  'image/apng',\n  'image/png',\n  'image/webp'\n];\n\n/**\n * All Cloud Optimized GeoTiff media types.\n * \n * @type {Array.<string>}\n */\nexport const cogMediaTypes = [\n  'image/tiff; application=geotiff; profile=cloud-optimized',\n  'image/vnd.stac.geotiff; cloud-optimized=true'\n];\n\n/**\n * All GeoTiff media types (including COG media types).\n * \n * @type {Array.<string>}\n */\nexport const geotiffMediaTypes = [\n  'application/geotiff',\n  'image/tiff; application=geotiff',\n  'image/vnd.stac.geotiff',\n].concat(cogMediaTypes);\n\n/**\n * All image media types combined (Web Browser + GeoTiff).\n * \n * @type {Array.<string>}\n */\nexport const imageMediaTypes = browserImageTypes.concat(geotiffMediaTypes);\n\n/**\n * Checks whether a given media type is in the list of media types.\n * \n * @param {string|undefined} type The potential media type.\n * @param {string|Array.<string>} allowedTypes A list of allowed media types (or a single media type as string).\n * @param {boolean} allowUndefined If set to `true`, returns `true` if `undefined` is passed as `type`.\n * @returns {boolean} `true` if the media type is allowed, `false` otherwise.\n */\nexport function isMediaType(type, allowedTypes, allowUndefined = false) {\n  if (!Array.isArray(allowedTypes)) {\n    allowedTypes = [allowedTypes];\n  }\n  if (allowUndefined && typeof type === 'undefined') {\n    return true;\n  }\n  else if (typeof type !== 'string') {\n    return false;\n  }\n  else {\n    allowedTypes = allowedTypes.map(type => type.toLowerCase());\n    return allowedTypes.includes(type.toLowerCase());\n  }\n}\n\n/**\n * Checks whether the given media type is a STAC media type (JSON or GeoJSON).\n * \n * @param {string|undefined} type The potential media type.\n * @param {boolean} allowUndefined If set to `true`, returns `true` if `undefined` is passed as `type`.\n * @returns {boolean} `true` if the media type is a STAC media type, `false` otherwise.\n */\nexport function isStacMediaType(type, allowUndefined = false) {\n  return isMediaType(type, stacMediaTypes, allowUndefined);\n}\n","import { browserProtocols, toAbsolute } from './http.js';\nimport { cogMediaTypes, geotiffMediaTypes, isMediaType } from \"./mediatypes.js\";\nimport { hasText } from './utils.js';\nimport STACObject from './object.js';\nimport URI from 'urijs';\nimport { browserImageTypes } from './mediatypes.js';\n\n/**\n * A STAC reference as base for Assets and Links.\n * \n * Don't instantiate this class!\n * \n * @interface\n * @property {string} href\n * @property {?string} type\n * \n * @param {Object} data The STAC API Collection object\n * @param {STAC|null} context The object that contains the link\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass STACReference extends STACObject {\n\n  constructor(data, context = null, keyMap = {}, privateKeys = []) {\n    super(data, keyMap, ['_context'].concat(privateKeys));\n    if (!this._context) {\n      this._context = context;\n    }\n  }\n\n  /**\n   * Gets the URL of the reference as absolute URL.\n   * \n   * @param {boolean} stringify \n   * @returns {string|null}\n   */\n  getAbsoluteUrl(stringify = true) {\n    if (this._context) {\n      return toAbsolute(this.href, this._context.getAbsoluteUrl(), stringify);\n    }\n    else if (this.href.includes('://')) {\n      return this.href;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the STAC entity that contains the reference.\n   * \n   * @returns {STAC|null}\n   */\n  getContext() {\n    return this._context;\n  }\n\n  /**\n   * Checks whether a given reference can be displayed by a browser.\n   * \n   * A browser can usually display an image if it is a specific file format (e.g. JPEG, PNG, ...) and is served over HTTP(S).\n   * \n   * @returns {boolean} `true` if a browser can display the given reference, `false` otherwise.\n   * @see {canBrowserDisplayImage}\n   */\n  canBrowserDisplayImage(allowUndefined = false) {\n    if (typeof this.href !== 'string') {\n      return false;\n    }\n    else if (!allowUndefined && typeof this.type === 'undefined') {\n      return false;\n    }\n    let uri = new URI(this.href);\n    let protocol = uri.protocol().toLowerCase();\n    let extension = uri.suffix().toLowerCase();\n    if (hasText(protocol) && !browserProtocols.includes(protocol)) {\n      return false;\n    }\n    else if (hasText(this.type) && browserImageTypes.includes(this.type.toLowerCase())) {\n      return true;\n    }\n    else if (typeof this.type === 'undefined' && hasText(extension) && (extension === 'jpg' || browserImageTypes.includes('image/' + extension))) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Checks whether this asset is of a specific type.\n   * \n   * @param {string|Array.<string>} types One or more media types.\n   * @returns {boolean} `true` is this asset is one of the given types, `false` otherwise.\n   */\n  isType(types) { // string or array of strings\n    return hasText(this.type) && isMediaType(this.type, types);\n  }\n\n  /**\n   * Checks whether this asset is a GeoTiff (including COGs).\n   * \n   * @returns {boolean} `true` is this asset is a GeoTiff, `false` otherwise.\n   */\n  isGeoTIFF() {\n    return this.isType(geotiffMediaTypes);\n  }\n\n  /**\n   * Checks whether this asset is a COG (excluding pure GeoTiffs).\n   * \n   * @returns {boolean} `true` is this asset is a COG, `false` otherwise.\n   */\n  isCOG() {\n    return this.isType(cogMediaTypes);\n  }\n\n  /**\n   * Checks whether the asset is accessible via HTTP or HTTPS.\n   * \n   * Returns `null` for item asset definitions, otherwise a `boolean` value.\n   * \n   * @returns {boolean|null} `true` is this asset is available via HTTP or HTTPS, `false` or `null` otherwise.\n   */\n  isHTTP() {\n    let uri = this.getAbsoluteUrl(false);\n    let protocol = uri.protocol().toLowerCase();\n    return hasText(protocol) && browserProtocols.includes(protocol);\n  }\n  \n}\n\nexport default STACReference;\n","import STACReference from './reference.js';\nimport { isObject } from './utils.js';\n\n/**\n * A STAC Link object.\n * \n * You can access all properties of the given STAC Link object directly, e.g. `link.href`.\n * \n * @class\n * @property {string} href\n * @property {string} rel\n * @property {?string} type\n * @property {?string} title\n * @property {?string} method\n * @property {?Object.<string, string>} headers\n * @property {?Object} body\n * @property {?boolean} merge\n * \n * @param {Object|Link} data The STAC Link object\n * @param {STAC|null} context The object that contains the link\n */\nclass Link extends STACReference {\n\n  constructor(data, context = null) {\n    super(data, context);\n  }\n  \n  /**\n   * Check whether this given object is a STAC LInk.\n   * \n   * @returns {boolean} `true` if the object is a STAC Link, `false` otherwise.\n   */\n  isLink() {\n    return true;\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'Link'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return \"Link\";\n  }\n\n  /**\n   * Converts an array of STAC Links into an array of stac-js Links.\n   * \n   * @param {Array.<Object>} links Links\n   * @param {STAC|null} context The object that contains the links\n   * @returns {Array.<Link>} Improved Links\n   */\n  static fromLinks(links, context = null) {\n    if(!Array.isArray(links)) {\n      return [];\n    }\n    return links.map(link => isObject(link) ? new Link(link, context) : link);\n  }\n\n}\n\nexport default Link;\n","import STACObject from './object.js';\nimport Link from './link.js';\nimport { isStacMediaType } from './mediatypes.js';\nimport { hasText, isObject } from './utils.js';\n\n/**\n * STAC Hypermedia class for STAC objects.\n * \n * Don't instantiate this class!\n * \n * @interface\n * @property {Array.<Link>} links\n * \n * @param {Object} data The STAC object\n * @param {string|null} absoluteUrl Absolute URL of the STAC object\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass STACHypermedia extends STACObject {\n\n  constructor(data, absoluteUrl = null, keyMap = {}, privateKeys = []) {\n    super(\n      data,\n      Object.assign({ links: Link.fromLinks }, keyMap),\n      ['_url'].concat(privateKeys)\n    );\n\n    // Set or detect the URL of the STAC entity\n    if (!this._url) {\n      this._url = absoluteUrl;\n      if (!this._url) {\n        let self = this.getSelfLink();\n        if (self) {\n          this._url = self.href;\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the absolute URL of the STAC entity (if provided explicitly or available from the self link).\n   * \n   * @returns {string|null} Absolute URL\n   */\n  getAbsoluteUrl() {\n    return this._url;\n  }\n\n  /**\n   * Sets the absolute URL of the STAC entity.\n   * \n   * @param {string} url Absolute URL\n   */\n  setAbsoluteUrl(url) {\n    this._url = url;\n  }\n\n  /**\n   * \n   * @todo\n   * @param {string} rel \n   * @param {boolean} allowUndefined \n   * @returns {Array.<Link>}\n   */\n  getStacLinksWithRel(rel, allowUndefined = true) {\n    return this.getLinksWithRels([rel])\n      .filter(link => isStacMediaType(link.type, allowUndefined));\n  }\n\n  /**\n   * \n   * @todo\n   * @param {string} rel \n   * @param {boolean} allowUndefined \n   * @returns {Link} \n   */\n  getStacLinkWithRel(rel, allowUndefined = true) {\n    const links = this.getStacLinksWithRel(rel, allowUndefined);\n    if (links.length > 0) {\n      return links[0];\n    }\n    else {\n      return null;\n    }\n  }\n  \n  /**\n   * \n   * @todo\n   * @returns {Array.<Link>}\n   */\n  getLinks() {\n    return Array.isArray(this.links) ? this.links.filter(link => isObject(link) && hasText(link.href)) : [];\n  }\n\n  /**\n   * \n   * @todo\n   * @param {string} rel \n   * @returns {Link} \n   */\n  getLinkWithRel(rel) {\n    return this.getLinks().find(link => link.rel === rel) || null;\n  }\n\n  /**\n   * \n   * @todo\n   * @param {Array.<string>} rels \n   * @returns {Array.<Link>} \n   */\n  getLinksWithRels(rels) {\n    return this.getLinks().filter(link => rels.includes(link.rel));\n  }\n\n  /**\n   * \n   * @todo\n   * @param {Array.<string>} rels \n   * @returns {Array.<Link>} \n   */\n  getLinksWithOtherRels(rels) {\n    return this.getLinks().filter(link => !rels.includes(link.rel));\n  }\n\n  /**\n   * Returns the self link, if present.\n   * \n   * @returns {Link|null} The self link\n   */\n  getSelfLink() {\n    return this.getStacLinkWithRel('self');\n  }\n\n  /**\n   * Returns the root link, if present.\n   * \n   * @returns {Link|null} The root link\n   */\n  getRootLink() {\n    return this.getStacLinkWithRel('root');\n  }\n\n  /**\n   * Returns the parent link, if present.\n   * \n   * @returns {Link|null} The parent link\n   */\n  getParentLink() {\n    return this.getStacLinkWithRel('parent');\n  }\n  \n}\n\nexport default STACHypermedia;\n","import STACHypermedia from './hypermedia.js';\n\n/**\n * A STAC API Collection (i.e. an ItemCollection or a CollectionCollection)\n * \n * You can access all properties of the given STAC Catalog object directly, e.g. `collection.links`.\n * \n * Don't instantiate this class!\n * \n * @interface\n * @param {Object} data The STAC API Collection object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Item Collection\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass APICollection extends STACHypermedia {\n\n  constructor(data, absoluteUrl = null, keyMap = {}, privateKeys = []) {\n    super(data, absoluteUrl, keyMap, privateKeys);\n  }\n\n  /**\n   * Returns all STAC entities in this list.\n   * \n   * @returns {Array.<STAC>} All STAC entities\n   */\n  getAll() {\n    return [];\n  }\n\n}\n\nexport default APICollection;\n","import { getMaxForDataType, getMinForDataType, hasText, isObject, mergeArraysOfObjects } from \"./utils.js\";\nimport STACReference from './reference.js';\n\n/**\n * A STAC Asset or Item Asset Definition.\n * \n * You can access all properties of the given STAC Asset object directly, e.g. `asset.href`.\n * \n * @class\n * @property {string} href\n * @property {?string} title\n * @property {?string} description\n * @property {?string} type\n * @property {?Array.<string>} roles\n * \n * @param {Object|Asset} data The STAC Asset object\n * @param {string} key The asset key\n * @param {Collection|Item|null} context The object that contains the asset\n */\nclass Asset extends STACReference {\n\n  constructor(data, key = null, context = null) {\n    super(data, context, {}, ['_key']);\n    if (!this._key) {\n      this._key = key;\n    }\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'Asset'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return \"Asset\";\n  }\n\n  /**\n   * Check whether this given object is a STAC Asset.\n   * \n   * @returns {boolean} `true` if the object is a STAC Asset, `false` otherwise.\n   */\n  isAsset() {\n    return true;\n  }\n\n  /**\n   * Gets the URL of the asset as absolute URL.\n   * \n   * @param {boolean} stringify \n   * @returns {URI|string|null}\n   */\n  getAbsoluteUrl(stringify = true) {\n    if (this.isDefintion()) {\n      return null;\n    }\n    return super.getAbsoluteUrl(stringify);\n  }\n\n  /**\n   * Returns the key of the asset.\n   * \n   * @returns {string|null} Key of the asset\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Returns the metadata for the given field name.\n   * \n   * Returns the metadata from the asset, if present.\n   * Otherwise, returns the metadata from calling `getMetadata()` on the STAC entity that contains the asset.\n   * \n   * @param {string} field Field name\n   * @returns {*} The value of the field\n   */\n  getMetadata(field) {\n    if (typeof this[field] !== 'undefined') {\n      return this[field];\n    }\n    if (this._context) {\n      return this._context.getMetadata(field);\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the bands for the asset.\n   * \n   * This is usually a merge of eo:bands and raster:bands.\n   * \n   * @returns {Array.<Object>}\n   */\n  getBands() {\n    return mergeArraysOfObjects(this['eo:bands'], this['raster:bands']);\n  }\n\n  /**\n   * The RGB bands.\n   * \n   * @typedef {Object} VisualBands\n   * @property {BandWithIndex} red The red band with its index\n   * @property {BandWithIndex} green The green band with its index\n   * @property {BandWithIndex} blue The blue band with its index\n   */\n\n  /**\n   * Find the RGB bands.\n   * \n   * @returns {VisualBands|null} Object with the RGB bands or null\n   */\n  findVisualBands() {\n    let rgb = {\n      red: null,\n      green: null,\n      blue: null\n    };\n    let bands = this.getBands();\n    for(let key in bands) {\n      let index = parseInt(key, 10); // findIndex returns number, for loop uses strings?!\n      let band = bands[index];\n      if (isObject(band) && hasText(band.common_name) && band.common_name in rgb) {\n        rgb[band.common_name] = { index, band };\n      }\n    }\n    let complete = Object.values(rgb).every(o => o !== null);\n    return complete ? rgb : null;\n  }\n\n  /**\n   * Returns the band for the given criteria.\n   * \n   * Searches the given `property` (default: `name`) for the given value(s).\n   * \n   * @param {*} value A single value to find or a list of values to find one of.\n   * @param {string} property The property in the bands to match against.\n   * @param {Array.<Object>} bands For performance reasons you can provide a list of merged bands from `getBands()`.\n   * @returns {BandWithIndex|null}\n   * @see {getBands}\n   */\n  findBand(value, property = 'name', bands = null) {\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n    if (!isObject(bands)) {\n      bands = this.getBands();\n    }\n    let index = bands.findIndex(band => isObject(band) && value.includes(band[property]));\n    if (index >= 0) {\n      return { index, band: bands[index] };\n    }\n    return null;\n  }\n\n  /**\n   * Returns the band for the given band index.\n   * \n   * Passes through the (band) objects.\n   * \n   * @param {number|Object} band\n   * @returns {Object|null}\n   * @see {getBands}\n   */\n  getBand(band) {\n    if (isObject(band) || band === null) {\n      return band;\n    }\n    let bands = this.getBands();\n    return bands[band] || null;\n  }\n\n  /**\n   * Gets the reported minimum and maximum values for an asset (or band).\n   * \n   * Searches through different extension fields in raster, claasification, and file.\n   * \n   * @param {Object|number} band\n   * @returns {Statistics}\n   */\n  getMinMaxValues(band = null) {\n    band = this.getBand(band);\n\n    /**\n     * Statistics\n     * \n     * @typedef {Object} Statistics\n     * @property {number|null} minimum Minimum value\n     * @property {number|null} maximum Maximum value\n     */\n    const stats = {\n      minimum: null,\n      maximum: null\n    };\n\n    // Checks whether the stats object is completely filled\n    const isComplete = obj => obj.minimum !== null && obj.maximum !== null;\n\n    // data sources: raster (statistics, histogram, data_type), classification, file (values, data_type)\n    if (band) {\n      if (isObject(band.statistics)) {\n        if (typeof band.statistics.minimum === 'number') {\n          stats.minimum = band.statistics.minimum;\n        }\n        if (typeof band.statistics.maximum === 'number') {\n          stats.maximum = band.statistics.maximum;\n        }\n        if (isComplete(stats)) {\n          return stats;\n        }\n      }\n\n      if (isObject(band.histogram)) {\n        if (typeof band.histogram.min === 'number') {\n          stats.minimum = band.histogram.min;\n        }\n        if (typeof band.histogram.max === 'number') {\n          stats.maximum = band.histogram.max;\n        }\n        if (isComplete(stats)) {\n          return stats;\n        }\n      }\n    }\n\n    let classification = this.getMetadata(\"classification:classes\");\n    if (Array.isArray(classification)) {\n      classification.reduce((obj, cls) => {\n        obj.minimum = Math.min(obj.minimum, cls.value);\n        obj.maximum = Math.max(obj.maximum, cls.value);\n        return obj;\n      }, stats);\n      if (isComplete(stats)) {\n        return stats;\n      }\n    }\n\n    let values = this.getMetadata(\"file:values\");\n    if (Array.isArray(values)) {\n      values.reduce((obj, map) => {\n        obj.minimum = Math.min(obj.minimum, ...map.values);\n        obj.maximum = Math.max(obj.maximum, ...map.values);\n        return obj;\n      }, stats);\n      if (isComplete(stats)) {\n        return stats;\n      }\n    }\n\n    let data_type = (isObject(band) && band.data_type) || this.getMetadata(\"file:data_type\");\n    if (data_type) {\n      stats.minimum = getMinForDataType(data_type);\n      stats.maximum = getMaxForDataType(data_type);\n    }\n\n    return stats;\n  }\n\n  /**\n   * Gets the reported no-data values for an asset (or band).\n   * \n   * Searches through different extension fields in raster, claasification, and file.\n   * \n   * @param {Object|number} band \n   * @returns {Array.<*>}\n   */\n  getNoDataValues(band = null) {\n    band = this.getBand(band);\n    // data sources: raster (nodata), classification (nodata flag), file (nodata)\n    let nodata = [];\n    if (band && typeof band.nodata !== 'undefined') {\n      nodata.push(band.nodata);\n    }\n    else {\n      let file = this.getMetadata(\"file:nodata\");\n      if (typeof file !== 'undefined') {\n        nodata = file;\n      }\n      else {\n        let classification = this.getMetadata(\"classification:classes\");\n        if (Array.isArray(classification)) {\n          nodata = classification\n            .filter(cls => Boolean(cls.nodata))\n            .map(cls => cls.value);\n        }\n      }\n    }\n\n    return nodata.map(value => {\n      if (value === \"nan\") {\n        return NaN;\n      }\n      else if (value === \"+inf\") {\n        return +Infinity;\n      }\n      else if (value === \"-inf\") {\n        return -Infinity;\n      }\n      else {\n        return value;\n      }\n    });\n  }\n\n  /**\n   * Returns whether this asset is an Item Asset definition (i.e. doesn't have an href) or not.\n   * \n   * @returns {boolean} `true` is this asset is an Item Asset definition, `false` otherwise.\n   */\n  isDefintion() { // \n    return !hasText(this.href);\n  }\n\n  /**\n   * Checks whether the asset is accessible via HTTP or HTTPS.\n   * \n   * Returns `null` for item asset definitions, otherwise a `boolean` value.\n   * \n   * @returns {boolean|null} `true` is this asset is available via HTTP or HTTPS, `false` or `null` otherwise.\n   */\n  isHTTP() {\n    if (this.isDefintion()) {\n      return null;\n    }\n    return super.isHTTP();\n  }\n\n  /**\n   * Checks whether this asset as a specific role assigned.\n   * \n   * @param {string|Array.<string>} roles One or more roles.\n   * @param {boolean} includeKey Also returns `true` if the asset key equals to one of the given roles.\n   * @returns {boolean} `true` is this asset is one of the given roles (or key), `false` otherwise.\n   */\n  hasRole(roles, includeKey = false) { // string or array of strings\n    if (!Array.isArray(roles)) {\n      roles = [roles];\n    }\n    if (includeKey && roles.includes(this.getKey())) {\n      return true;\n    }\n    return Array.isArray(this.roles) && (Boolean(this.roles.find(role => roles.includes(role))));\n  }\n\n  /**\n   * Converts an object of STAC Assets into an object of stac-js Assets.\n   * \n   * @param {Object.<string, Object>} assets Assets\n   * @param {Collection|Item|null} context The object that contains the assets\n   * @returns {Object.<string, Asset>} Improved Assets\n   */\n  static fromAssets(assets, context = null) {\n    let newAssets = {};\n    if(isObject(assets)) {\n      for(let key in assets) {\n        newAssets[key] = new Asset(assets[key], key, context);\n      }\n    }\n    return newAssets;\n  }\n\n}\n\nexport default Asset;\n","import { geotiffMediaTypes, isMediaType } from './mediatypes.js';\nimport { isObject } from './utils.js';\nimport STACHypermedia from './hypermedia.js';\n\n/**\n * Class for STAC spec entities (Item, Catalog and Collection).\n * \n * Don't instantiate this class!\n * \n * @interface\n * @param {Object} data The STAC object\n * @param {string|null} absoluteUrl Absolute URL of the STAC object\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass STAC extends STACHypermedia {\n\n  constructor(data, absoluteUrl = null, keyMap = {}, privateKeys = []) {\n    super(data, absoluteUrl, keyMap, privateKeys);\n  }\n\n  /**\n   * Returns a single temporal extent for the STAC entity.\n   * \n   * @returns {Array.<Date|null>|null}\n   */\n  getTemporalExtent() {\n    return null;\n  }\n\n  /**\n   * Returns the temporal extent(s) for the STAC entity.\n   * \n   * @returns {Array.<Array.<Date|null>>}\n   */\n  getTemporalExtents() {\n    return [];\n  }\n\n  /**\n   * Get the icons from the links in a STAC entity.\n   * \n   * @param {boolean} allowUndefined \n   * @returns {Array.<Link>}\n   */\n  getIcons(allowUndefined = true) {\n    return this.getLinksWithRels(['icon'])\n      .filter(img => img.canBrowserDisplayImage(allowUndefined));\n  }\n\n  /**\n   * Get the thumbnails from the assets and links in a STAC entity.\n   * \n   * @param {boolean} browserOnly - Return only images that can be shown in a browser natively (PNG/JPG/GIF/WEBP + HTTP/S).\n   * @param {string|null} prefer - If not `null` (default), prefers a role over the other. Either `thumbnail` or `overview`.\n   * @returns {Array.<STACReference>} Asset or Link\n   */\n  getThumbnails(browserOnly = true, prefer = null) {\n    let thumbnails = this.getAssetsWithRoles(['thumbnail', 'overview'], true);\n    if (prefer && thumbnails.length > 1) {\n      thumbnails.sort(a => (Array.isArray(a.roles) && a.roles.includes(prefer)) || (a.getKey() === prefer) ? -1 : 1);\n    }\n    // Get from links only if no assets are available as they should usually be the same as in assets\n    if (thumbnails.length === 0) {\n      thumbnails = this.getLinksWithRels(['preview']);\n    }\n    if (browserOnly) {\n      // Remove all images that can't be displayed in a browser\n      thumbnails = thumbnails.filter(img => img.canBrowserDisplayImage());\n    }\n    return thumbnails;\n  }\n\n  /**\n   * Determines the default GeoTiff asset for visualization.\n   * \n   * @param {boolean} httpOnly Return only GeoTiffs that can be accessed via HTTP(S)\n   * @param {boolean} cogOnly Return only COGs\n   * @returns {Asset} Default GeoTiff asset\n   * @see {rankGeoTIFFs}\n   */\n  getDefaultGeoTIFF(httpOnly = true, cogOnly = false) {\n    let scores = this.rankGeoTIFFs(httpOnly, cogOnly);\n    return scores[0]?.asset;\n  }\n\n  /**\n   * Object with an asset and the corresponding score.\n   * \n   * @typedef {Object} AssetScore\n   * @property {Asset} asset\n   * @property {number} score\n   */\n\n  /**\n   * A function that can influence the score.\n   * \n   * Returns a relative addition to the score.\n   * Negative values subtract from the score.\n   * \n   * @callback STAC~rankGeoTIFFs\n   * @param {Asset} asset The asset to calculate the score for.\n   */\n\n  /**\n   * Ranks the GeoTiff assets for visualization purposes.\n   * \n   * The score factors can be found below:\n   * - Roles/Keys (by default) - if multiple roles apply only the highest score is added:\n   *   - overview => +3\n   *   - thumbnail => +2\n   *   - visual => +2\n   *   - data => +1\n   *   - none of the above => no change\n   * - Other factors:\n   *   - media type is COG: +2 (if cogOnly = false)\n   *   - has RGB bands: +1\n   *   - additionalCriteria: +/- a custom value\n   * \n   * @param {boolean} httpOnly Return only GeoTiffs that can be accessed via HTTP(S)\n   * @param {boolean} cogOnly Return only COGs\n   * @param {Object.<string, number>} roleScores Roles (and keys) considered for the scoring. They key is the role name, the value is the score. Higher is better. Defaults to the roles and scores detailed above. An empty object disables role-based scoring.\n   * @param {STAC~rankGeoTIFFs} additionalCriteria A function to customize the score by adding/subtracting.\n   * @returns {Array.<AssetScore>} GeoTiff assets sorted by score in descending order.\n   */\n  rankGeoTIFFs(httpOnly = true, cogOnly = false, roleScores = null, additionalCriteria = null) {\n    if (!isObject(roleScores)) {\n      roleScores = {\n        data: 1, \n        visual: 2,\n        thumbnail: 2,\n        overview: 3\n      };\n    }\n    let scores = [];\n    let assets = this.getAssetsByTypes(geotiffMediaTypes);\n    if (httpOnly) {\n      assets = assets.filter(asset => asset.isHTTP() && (!cogOnly || asset.isCOG()));\n    }\n    let roles = Object.entries(roleScores);\n    for(let asset of assets) {\n      let score = 0;\n      if (roles.length > 0) {\n        let result = roles\n          .filter(([role]) => asset.hasRole(role, true)) // Remove all roles that don't exist in the asset\n          .map(([,value]) => value); // Map to the scores\n        if (result.length > 0) {\n          score += Math.max(...result); // Add the highest of the scores\n        }\n      }\n      if (!cogOnly && asset.isCOG()) {\n        score += 2;\n      }\n      if (asset.findVisualBands()) {\n        score += 1;\n      }\n      if (typeof additionalCriteria === 'function') {\n        score += additionalCriteria(asset);\n      }\n\n      scores.push({asset, score});\n    }\n    scores.sort((a,b) => b.score - a.score);\n    return scores;\n  }\n\n  /**\n   * The single-band assets for RGB composites.\n   * \n  * @typedef {Object} VisualAssets\n  * @property {BandWithIndex} red The red band with its index\n  * @property {BandWithIndex} green The green band with its index\n  * @property {BandWithIndex} blue The blue band with its index\n  */\n\n  /**\n   * Find the single-band assets for RGB.\n   * \n   * @returns {VisualAssets|null} Object with the RGB bands or null\n   */\n  findVisualAssets() {\n    let rgb = {\n      red: null,\n      green: null,\n      blue: null\n    };\n    let names = Object.keys(rgb);\n    let assets = this.getAssets();\n    for(let asset of assets) {\n      let bands = asset.getBands();\n      if (bands.length !== 1) {\n        continue;\n      }\n      let result = asset.findBand(names, 'common_name', bands);\n      if (result) {\n        rgb[result.band.common_name] = asset;\n      }\n    }\n    let complete = Object.values(rgb).every(o => o !== null);\n    return complete ? rgb : null;\n  }\n\n  /**\n   * \n   * @todo\n   * @param {string} key\n   * @returns {Asset|null}\n   */\n  getAsset(key) {\n    if (!isObject(this.assets)) {\n      return null;\n    }\n    return this.assets[key] || null;\n  }\n\n  /**\n   * \n   * @todo\n   * @returns {Array.<Asset>}\n   */\n  getAssets() {\n    if (!isObject(this.assets)) {\n      return [];\n    }\n    return Object.values(this.assets);\n  }\n\n  /**\n   * Returns all assets that contain at least one of the given roles.\n   * \n   * @param {string|Array.<string>} roles One or more roles.\n   * @param {boolean} includeKey Also returns `true` if the asset key equals to one of the given roles.\n   * @returns {Array.<Asset>} The assets with the given roles.\n   */\n  getAssetsWithRoles(roles, includeKey = false) {\n    return this.getAssets().filter(asset => asset.hasRole(roles, includeKey));\n  }\n\n  /**\n   * \n   * @todo\n   * @param {string} role \n   * @param {boolean} includeKey \n   * @returns {Asset|null}\n   */\n  getAssetWithRole(role, includeKey = false) {\n    let assets = this.getAssetsWithRoles([role], includeKey);\n    return assets[0] || null;\n  }\n\n  /**\n   * \n   * @todo\n   * @param {Array.<string>} types \n   * @returns {Array.<Asset>}\n   */\n  getAssetsByTypes(types) {\n    return this.getAssets().filter(asset => isMediaType(asset.type, types));\n  }\n\n  /**\n   * \n   * @todo\n   * @param {*} other \n   * @returns {boolean}\n   */\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof STAC)) {\n      return false;\n    }\n    if (this.getObjectType() !== other.getObjectType()) {\n      return false;\n    }\n    if (this.id && this.id === other.id) {\n      return true;\n    }\n    return false;\n  }\n\n}\n\nexport default STAC;\n","import STAC from './stac.js';\n\n/**\n * Class for common parts of Catalogs and Collections.\n * \n * Don't instantiate this class!\n * \n * @interface\n * @param {Object} data The STAC Catalog or Collection object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Catalog or Collection\n * @param {Object.<string, function>} keyMap Keys and functions that convert the values to stac-js objects.\n * @param {Array.<string>} privateKeys Keys that are private members of the stac-js objects (for cloning and export).\n */\nclass CatalogLike extends STAC {\n\n  constructor(data, absoluteUrl = null, keyMap = {}, privateKeys = []) {\n    super(data, absoluteUrl, keyMap, privateKeys);\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'Catalog' or 'Collection'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return this.type;\n  }\n\n  /**\n   * Returns the search link, if present.\n   * \n   * If a specific method is provied, can exclude other methods from being returned.\n   * \n   * @returns {Link|null} The search link\n   */\n  getSearchLink(method = null) {\n    let links = this.getStacLinksWithRel('search');\n    if (!method) {\n      return links.find(link => link.method === method || (!method && !link.method)) || null;\n    }\n    else {\n      return links[0] || null;\n    }\n  }\n\n  /**\n   * Returns the link for API collections, if present.\n   * \n   * @returns {Link|null} The API collections link\n   */\n  getApiCollectionsLink() {\n    return this.getStacLinkWithRel('data');\n  }\n\n  /**\n   * Returns the link for API items, if present.\n   * \n   * @returns {Link|null} The API items link\n   */\n  getApiItemsLink() {\n    return this.getStacLinkWithRel('items');\n  }\n\n  /**\n   * Returns all child links.\n   * \n   * @returns {Array.<Link>} The child links\n   */\n  getChildLinks() {\n    return this.getStacLinksWithRel('child');\n  }\n\n  /**\n   * Returns all item links.\n   * \n   * @returns {Array.<Link>} The child links\n   */\n  getItemLinks() {\n    return this.getStacLinksWithRel('item');\n  }\n\n}\n\nexport default CatalogLike;\n","import CatalogLike from './cataloglike.js';\n\n/**\n * A STAC Catalog.\n * \n * You can access all properties of the given STAC Catalog object directly, e.g. `catalog.title`.\n * \n * @class\n * @property {string} stac_version\n * @property {?Array.<string>} stac_extensions\n * @property {string} type\n * @property {string} id\n * @property {?string} title\n * @property {string} description\n * @property {Array.<Link>} links\n * \n * @param {Object} data The STAC Catalog object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Catalog\n */\nclass Catalog extends CatalogLike {\n\n  constructor(data, absoluteUrl = null) {\n    super(data, absoluteUrl);\n  }\n\n}\n\nexport default Catalog;\n","import { hasText } from \"./utils.js\";\n\n/**\n * Parses a UTC-based ISO8601 date and time string to a Date object.\n * \n * Does not support timezones as all STAC datetime must be given in UTC.\n * \n * @returns {Date|null}\n */\nexport function isoToDate(str) {\n  if (hasText(str) && str.length >= 10) {\n    try {\n      let strParts = str.match(/^(-?\\d{1,})-(\\d\\d)-(\\d\\d)[T ](\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d*))?(?:Z|[+-]00:00)?$/i);\n      let dt = strParts.slice(1).map(n => parseInt(n, 10));\n      return new Date(Date.UTC(dt[0], dt[1] - 1, dt[2], dt[3], dt[4], dt[5], dt[6] || 0));\n    } catch(error) {\n      return null;\n    }\n  }\n  return null;\n}\n\n/**\n * Computes the center datetime between two datetimes.\n * \n * @param {Date} start start datetime\n * @param {Date} end end datetime\n * @returns {Date} center datetime\n */\nexport function centerDateTime(start, end) {\n  return new Date(start.valueOf() + ((end - start) / 2));\n}\n\n/**\n * Computes a single interval from multiple temporal intervals.\n * \n * @param {Array.<Array.<Date>>} list A list of temporal intervals\n * @returns {Array.<Date>|null} The merged temporal interval\n */\nexport function unionDateTime(list) {\n  if (!Array.isArray(list) || list.length === 0) {\n    return null;\n  }\n\n  let min;\n  let max;\n  const assign = (base, value, fn) => {\n    if (typeof base === 'undefined') {\n      return value;\n    }\n    else if (base === null || value === null) {\n      return null;\n    }\n    else {\n      return fn(base, value);\n    }\n  };\n  list.forEach(([start, end]) => {\n    min = assign(min, start, Math.min);\n    max = assign(max, end, Math.max);\n  });\n  return [\n    min === null ? null : new Date(min),\n    max === null ? null : new Date(max)\n  ];\n}\n","function toObject(bbox) {\n  let hasZ = bbox.length > 4;\n  let west = bbox[0];\n  let east = bbox[hasZ ? 3 : 2];\n  let south = bbox[1];\n  let north = bbox[hasZ ? 4 : 3];\n  return { west, east, south, north };\n}\n\nfunction bboxToCoords(bbox) {\n  let { west, east, south, north } = toObject(bbox);\n  return [\n    [\n      [west, north],\n      [west, south],\n      [east, south],\n      [east, north],\n      [west, north]\n    ]\n  ];\n}\n\n/**\n * Converts one or more bounding boxes to a GeoJSON Feature.\n * \n * The Feature contains a Polygon or MultiPolygon based on the given number of valid bounding boxes.\n * \n * @param {BoundingBox|Array.<BoundingBox>} bboxes \n * @returns {Object|null}\n */\nexport function toGeoJSON(bboxes) {\n  if (isBoundingBox(bboxes)) {\n    // Wrap a single bounding into an array\n    bboxes = [bboxes];\n  }\n  else if (Array.isArray(bboxes)) {\n    // Remove invalid bounding boxes\n    bboxes = bboxes.filter(bbox => isBoundingBox(bbox));\n  }\n  // Return if no valid bbox is given\n  if (!Array.isArray(bboxes) || bboxes.length === 0) {\n    return null;\n  }\n\n  let coordinates = bboxes.reduce((list, bbox) => {\n    if (isAntimeridianBoundingBox(bbox)) {\n      let { west, east, south, north } = toObject(bbox);\n      list.push(bboxToCoords([-180, south, east, north]));\n      list.push(bboxToCoords([west, south, 180, north]));\n    }\n    else {\n      list.push(bboxToCoords(bbox));\n    }\n    return list;\n  }, []);\n\n  let geometry = null;\n  if (coordinates.length === 1) {\n    geometry = {\n      type: \"Polygon\",\n      coordinates: coordinates[0]\n    };\n  }\n  else if (coordinates.length > 1) {\n    geometry = {\n      type: \"MultiPolygon\",\n      coordinates\n    };\n  }\n  if (geometry) {\n    return {\n      type: \"Feature\",\n      geometry,\n      properties: {}\n    };\n  }\n}\n\n/**\n * Checks whether the given thing is a valid bounding box.\n * \n * A valid bounding box is an array with 4 or 6 numbers that are valid WGS84 coordinates and span a rectangle.\n * See the STAC specification for details.\n * \n * @param {BoundingBox|Array.<number>} bbox A potential bounding box.\n * @returns {boolean} `true` if valid, `false` otherwise\n */\nexport function isBoundingBox(bbox) {\n  if (!Array.isArray(bbox) || ![4,6].includes(bbox.length) || bbox.some(n => typeof n !== \"number\")) {\n    return false;\n  }\n  let { west, east, south, north } = toObject(bbox);\n  return (\n    south <= north &&\n    west >= -180 && west <= 180 &&\n    south >= -90 &&\n    east <= 180 && east >= -180 &&\n    north <= 90\n  );\n}\n\nexport function isAntimeridianBoundingBox(bbox) {\n  if (!isBoundingBox(bbox)) {\n    return false;\n  }\n  \n  let { west, east } = toObject(bbox);\n  return west > east;\n}\n\n/**\n * Compute the union of a list of bounding boxes.\n * \n * The function ignores any invalid bounding boxes or values for the third dimension.\n * \n * @param {Array.<BoundingBox|null>} bboxes \n * @returns {BoundingBox|null}\n * @see {isBoundingBox}\n */\nexport function unionBoundingBox(bboxes) {\n  if (!Array.isArray(bboxes) || bboxes.length === 0) {\n    return null;\n  }\n\n  let extrema = {\n    west: 180,\n    south: 90,\n    east: -180,\n    north: -90,\n  };\n  bboxes.forEach(bbox => {\n    if (!isBoundingBox(bbox)) {\n      return;\n    }\n    let obj = toObject(bbox);\n    let min = ['west', 'south'];\n    for(let key in obj) {\n      let fn = min.includes(key) ? Math.min : Math.max;\n      extrema[key] = fn(extrema[key], obj[key]);\n    }\n  });\n\n  let bbox = [extrema.west, extrema.south, extrema.east, extrema.north];\n  return isBoundingBox(bbox) ? bbox : null;\n}\n","import Asset from './asset.js';\nimport CatalogLike from './cataloglike.js';\nimport { isoToDate } from './datetime.js';\nimport { isBoundingBox, toGeoJSON } from './geo.js';\nimport { hasText, mergeArraysOfObjects } from './utils.js';\n\n/**\n * Extents\n * \n * @typedef {Object} Extent\n * @property {SpatialExtent} spatial Spatial extents\n * @property {TemporalExtent} temporal Temporal extents\n */\n/**\n * Spatial Extents\n * \n * @typedef {Object} SpatialExtent\n * @property {Array.<Array<number>>} bbox Bounding boxes\n */\n/**\n * Temporal Extents\n * \n * @typedef {Object} TemporalExtent\n * @property {Array.<Array<string|null>>} interval Intervals\n */\n\n/**\n * A STAC Collection.\n * \n * You can access all properties of the given STAC Collection object directly, e.g. `collection.title`.\n * \n * @class\n * @property {string} stac_version\n * @property {?Array.<string>} stac_extensions\n * @property {string} type\n * @property {string} id\n * @property {?string} title\n * @property {string} description\n * @property {?Array.<string>} keywords\n * @property {string} license\n * @property {Array.<Provider>} providers\n * @property {Extent} extent\n * @property {Object.<string, Array|Object>} summaries\n * @property {Array.<Link>} links\n * @property {Object.<string, Asset>} assets\n * \n * @param {Object} data The STAC Collection object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Collection\n */\nclass Collection extends CatalogLike {\n\n  constructor(data, absoluteUrl = null) {\n    const keyMap = {\n      assets: Asset.fromAssets,\n      item_assets: Asset.fromAssets\n    };\n    super(data, absoluteUrl, keyMap);\n  }\n\n  /**\n   * Returns a GeoJSON Feature for this STAC Collection.\n   * \n   * The Feature contains a Polygon or MultiPolygon based on the given number of valid bounding boxes.\n   * \n   * @returns {Object|null} GeoJSON object or `null`\n   */\n  toGeoJSON() {\n    let geojson = toGeoJSON(this.getBoundingBoxes());\n    if (geojson) {\n      geojson.id = this.id;\n    }\n    return geojson;\n  }\n\n  /**\n   * Returns a single union bounding box for the whole collection.\n   * \n   * @returns {BoundingBox|null}\n   */\n  getBoundingBox() {\n    let bboxes = this.getRawBoundingBoxes();\n    if (bboxes.length > 0 && isBoundingBox(bboxes[0])) {\n      return bboxes[0];\n    }\n    return null;\n  }\n\n  /**\n   * Returns the individual bounding boxes for the collection,\n   * without the union bounding box if multiple bounding boxes are given.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getBoundingBoxes() {\n    let bboxes = this.getRawBoundingBoxes();\n    if (bboxes.length === 1 && isBoundingBox(bboxes[0])) {\n      return bboxes;\n    }\n    else if (bboxes.length > 1) {\n      return bboxes.filter((bbox, i) => i > 0 && isBoundingBox(bbox));\n    }\n    return [];\n  }\n\n  /**\n   * Returns all bounding boxes from the collection, including the union bounding box.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getRawBoundingBoxes() {\n    let extents = this.extent?.spatial?.bbox;\n    if (Array.isArray(extents) && extents.length > 0) {\n      return extents;\n    }\n    return [];\n  }\n\n  /**\n   * Returns a single temporal extent for the STAC Collection.\n   * \n   * @returns {Array.<Date|null>|null}\n   */\n  getTemporalExtent() {\n    return this.getTemporalExtents()[0] || null;\n  }\n\n  /**\n   * Returns the temporal extent(s) for the STAC Collection.\n   * \n   * @returns {Array.<Array.<Date|null>>}\n   */\n  getTemporalExtents() {\n    let extents = this.extent?.temporal?.interval;\n    if (Array.isArray(extents) && extents.length > 0) {\n      return extents\n        .filter(extent => Array.isArray(extent) && (hasText(extent[0]) || hasText(extent[1])))\n        .map(interval => interval.map(datetime => isoToDate(datetime)));\n    }\n    return [];\n  }\n\n  /**\n   * Returns metadata from the Collection summaries for the given field name.\n   * \n   * @param {string} field Field name\n   * @returns {Array.<*>|Object} The value of the field\n   */\n  getSummary(field) {\n    return this.summaries[field];\n  }\n\n  /**\n   * Returns the bands.\n   * \n   * This is usually a merge of eo:bands and raster:bands from the summaries.\n   * \n   * @returns {Array.<Object>}\n   */\n  getBands() {\n    let eo = this.getSummary('eo:bands');\n    let raster = this.getSummary('raster:bands');\n    let all = [eo, raster].filter(arr => Array.isArray(arr));\n    if (all.length >= 2) {\n      return mergeArraysOfObjects(...all);\n    }\n    else if (all.length === 1) {\n      return all[0];\n    }\n    else {\n      return [];\n    }\n  }\n  \n}\n\nexport default Collection;\n","import Collection from './collection.js';\nimport { unionDateTime } from './datetime.js';\nimport { unionBoundingBox } from './geo.js';\nimport APICollection from './apicollection.js';\n\n/**\n * Represents an Collections containing Collections.\n * \n * @class\n * @property {Array.<Collection>} collections\n * @property {Array.<Link>} links\n * \n * @param {Object} data The STAC API Collections object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Item Collection\n */\nclass CollectionCollection extends APICollection {\n\n  constructor(data, absoluteUrl = null) {\n    const keyMap = {\n      collections: collections => collections.map(collection => new Collection(collection))\n    };\n    super(data, absoluteUrl, keyMap);\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'CollectionCollection'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return \"CollectionCollection\";\n  }\n\n  /**\n   * Returns all collections.\n   * \n   * @returns {Array.<Collection>} All STAC Collections\n   */\n  getAll() {\n    return this.collections;\n  }\n\n  /**\n   * Check whether this given object is a STAC Collection of Collections (i.e. API Collections).\n   * \n   * @returns {boolean} `true` if the object is a STAC CollectionCollection, `false` otherwise.\n   */\n  isCollectionCollection() {\n    return true;\n  }\n\n  /**\n   * Returns a GeoJSON Feature Collection for this STAC object.\n   * \n   * @returns {Object|null} GeoJSON object or `null`\n   */\n  toGeoJSON() {\n    let features = this.collections\n      .map(collection => collection.toGeoJSON())\n      .filter(geojson => geojson !== null);\n    return {\n      type: \"FeatureCollection\",\n      features\n    };\n  }\n\n  /**\n   * Returns a single bounding box for all the STAC collections.\n   * \n   * @returns {BoundingBox|null}\n   */\n  getBoundingBox() {\n    return unionBoundingBox(this.getBoundingBoxes());\n  }\n\n  /**\n   * Returns a list of bounding boxes for all the STAC collections.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getBoundingBoxes() {\n    return this.collections.map(collection => collection.getBoundingBox());\n  }\n\n  /**\n   * Returns a single temporal extent for the all the STAC collections.\n   * \n   * @returns {Array.<Date|null>|null}\n   */\n  getTemporalExtent() {\n    return unionDateTime(this.getTemporalExtents());\n  }\n\n  /**\n   * Returns the temporal extent(s) for the all the STAC collections.\n   * \n   * @returns {Array.<Array.<Date|null>>}\n   */\n  getTemporalExtents() {\n    return this.collections.map(collection => collection.getTemporalExtent());\n  }\n\n}\n\nexport default CollectionCollection;\n","import Asset from './asset.js';\nimport { centerDateTime, isoToDate } from './datetime.js';\nimport { isBoundingBox } from './geo.js';\nimport { hasText } from './utils.js';\nimport STAC from './stac.js';\n\n/**\n * Metadata for an item, the item properties.\n * \n * @typedef {Object} ItemProperties\n * @property {string} datetime Date and Time\n */\n\n/**\n * A STAC Item.\n * \n * You can access all properties of the given STAC Item object directly, e.g. `item.id` or `item.properties.datetime`.\n * \n * @class\n * @property {string} stac_version\n * @property {?Array.<string>} stac_extensions\n * @property {string} type\n * @property {string} id\n * @property {Object|null} geometry\n * @property {?Array.<number>} bbox\n * @property {ItemProperties} properties\n * @property {Array.<Link>} links\n * @property {Object.<string, Asset>} assets\n * @property {?string} collection\n * \n * @param {Object} data The STAC Item object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Item\n */\nclass Item extends STAC {\n  \n  constructor(data, absoluteUrl = null) {\n    super(data, absoluteUrl, { assets: Asset.fromAssets });\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'Item'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return \"Item\";\n  }\n\n  /**\n   * Returns a GeoJSON Feature for this STAC object.\n   * \n   * @returns {Object|null} GeoJSON object or `null`\n   */\n  toGeoJSON() {\n    return this.toJSON();\n  }\n\n  /**\n   * Returns a single bounding box for the item.\n   * \n   * @returns {BoundingBox|null}\n   */\n  getBoundingBox() {\n    return isBoundingBox(this.bbox) ? this.bbox : null;\n  }\n\n  /**\n   * Returns bounding boxes for the item.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getBoundingBoxes() {\n    return isBoundingBox(this.bbox) ? [this.bbox] : [];\n  }\n\n  /**\n   * Returns a datetime for the STAC Item.\n   * \n   * If no datetime but start or end datetime are specified, computes a datetime from them.\n   * \n   * @returns {Date|null}\n   */\n  getDateTime() {\n    let dt = isoToDate(this.properties.datetime);\n    if (!dt) {\n      let start = isoToDate(this.properties.start_datetime);\n      let end = isoToDate(this.properties.end_datetime);\n      if (start && end) {\n        return centerDateTime(start, end);\n      }\n      else {\n        return start || end;\n      }\n    }\n    return dt;\n  }\n\n  /**\n   * Returns a single temporal extent for the STAC Item.\n   * \n   * @returns {Array.<Date|null>|null}\n   */\n  getTemporalExtent() {\n    return this.getTemporalExtents()[0] || null;\n  }\n\n  /**\n   * Returns the temporal extent(s) for the STAC Item.\n   * \n   * @returns {Array.<Array.<Date|null>>}\n   */\n  getTemporalExtents() {\n    let dates = [];\n    if (hasText(this.properties.start_datetime) || hasText(this.properties.end_datetime)) {\n      dates = [[this.properties.start_datetime || null, this.properties.end_datetime || null]];\n    }\n    else if (hasText(this.properties.datetime)) {\n      dates = [[this.properties.datetime, this.properties.datetime]];\n    }\n    return dates.map(interval => interval.map(datetime => isoToDate(datetime)));\n  }\n\n  /**\n   * Returns metadata from the Item properties for the given field name.\n   * \n   * @param {string} field Field name\n   * @returns {*} The value of the field\n   */\n  getMetadata(field) {\n    return this.properties[field];\n  }\n\n  /**\n   * Returns the bands.\n   * \n   * @todo Merge bands from assets\n   * @returns {Array.<Object>}\n   */\n  getBands() {\n    let eo = this.getMetadata('eo:bands');\n    if (Array.isArray(eo)) {\n      return eo;\n    }\n    else {\n      // todo: merge bands from assets?\n      return [];\n    }\n  }\n\n  /**\n   * Returns the collection link, if present.\n   * \n   * @returns {Link|null} The collection link\n   */\n  getCollectionLink() {\n    return this.getStacLinkWithRel('collection');\n  }\n\n}\n\nexport default Item;\n","import { unionDateTime } from './datetime.js';\nimport { unionBoundingBox } from './geo.js';\nimport Item from './item.js';\nimport APICollection from './apicollection.js';\n\n/**\n * Represents an ItemCollection containing Items.\n * \n * @class\n * @property {string} type\n * @property {Array.<Item>} features\n * @property {Array.<Link>} links\n * \n * @param {Object} data The STAC Item Collection object\n * @param {string|null} absoluteUrl Absolute URL of the STAC Item Collection\n */\nclass ItemCollection extends APICollection {\n\n  constructor(data, absoluteUrl = null) {\n    const keyMap = {\n      features: features => features.map(feature => new Item(feature))\n    };\n    super(data, absoluteUrl, keyMap);\n  }\n\n  /**\n   * Returns the type of the STAC object, here: 'ItemCollection'.\n   * \n   * @returns {string}\n   */\n  getObjectType() {\n    return \"ItemCollection\";\n  }\n\n  /**\n   * Returns all items.\n   * \n   * @returns {Array.<Item>} All STAC Items\n   */\n  getAll() {\n    return this.features;\n  }\n\n  /**\n   * Returns a GeoJSON FeatureCollection for this STAC object.\n   * \n   * @returns {Object|null} GeoJSON object or `null`\n   */\n  toGeoJSON() {\n    return this.toJSON();\n  }\n\n  /**\n   * Returns a single bounding box for all the STAC items.\n   * \n   * @returns {BoundingBox|null}\n   */\n  getBoundingBox() {\n    return unionBoundingBox(this.getBoundingBoxes());\n  }\n\n  /**\n   * Returns a list of bounding boxes for all the STAC items.\n   * \n   * @returns {Array.<BoundingBox>}\n   */\n  getBoundingBoxes() {\n    return this.features.map(item => item.getBoundingBox());\n  }\n\n  /**\n   * Returns a single temporal extent for all the STAC items.\n   * \n   * @returns {Array.<Date|null>|null}\n   */\n  getTemporalExtent() {\n    return unionDateTime(this.getTemporalExtents());\n  }\n\n  /**\n   * Returns the temporal extent(s) for all the STAC items.\n   * \n   * @returns {Array.<Array.<Date|null>>}\n   */\n  getTemporalExtents() {\n    return this.features.map(item => item.getTemporalExtent());\n  }\n\n}\n\nexport default ItemCollection;\n","import Migrate from '@radiantearth/stac-migrate';\nimport APICollection from './apicollection.js';\nimport Asset from './asset.js';\nimport Catalog from './catalog.js';\nimport CatalogLike from './cataloglike.js';\nimport Collection from './collection.js';\nimport CollectionCollection from './collectioncollection.js';\nimport Item from './item.js';\nimport ItemCollection from './itemcollection.js';\nimport STACHypermedia from './hypermedia.js';\nimport STACObject from './object.js';\nimport STACReference from './reference.js';\nimport STAC from './stac.js';\n\n/**\n * Creates the corresponding object for a object that conforms to the STAC specification.\n * \n * This creates either a Catalog, a Collection or an Item instance.\n * By default it migrates the data to the latest STAC version, but doesn't update the version number.\n * \n * @param {Object} data The STAC object\n * @param {boolean} migrate `true` to migrate to the latest version, `false` otherwise\n * @param {boolean} updateVersionNumber `true` to update the version number (to the latest version), `false` otherwise. Only applies if `migrate` is set to `true`.\n * @returns {Catalog|Collection|CollectionCollection|Item|ItemCollection} The created object instance.\n */\nexport default function create(data, migrate = true, updateVersionNumber = false) {\n  if (migrate) {\n    data = Migrate.stac(data, updateVersionNumber);\n  }\n  if (data.type === 'Feature') {\n    return new Item(data);\n  }\n  else if (data.type === 'FeatureCollection') {\n    return new ItemCollection(data);\n  }\n  else if (data.type === 'Collection'|| (!data.type && typeof data.extent !== 'undefined' && typeof data.license !== 'undefined')) {\n    return new Collection(data);\n  }\n  else if (!data.type && Array.isArray(data.collections)) {\n    return new CollectionCollection(data);\n  }\n  else {\n    return new Catalog(data);\n  }\n}\n\nexport {\n  APICollection,\n  Asset,\n  Catalog,\n  CatalogLike,\n  Collection,\n  CollectionCollection,\n  Item,\n  ItemCollection,\n  STAC,\n  STACHypermedia,\n  STACObject,\n  STACReference\n};\n"],"names":["hasText","string","length","isObject","obj","Object","Array","isArray","mergeArraysOfObjects","bands","filter","arr","Math","max","map","merged","i","push","assign","band","getMinForDataType","str","startsWith","getMaxForDataType","STACObject","constructor","data","keyMap","privateKeys","Error","key","this","toJSON","_keyMap","_privateKeys","concat","isItem","type","isCatalog","isCatalogLike","isCollection","isItemCollection","isCollectionCollection","isAsset","isLink","getObjectType","getAbsoluteUrl","getMetadata","field","toGeoJSON","getBoundingBox","getBoundingBoxes","keys","forEach","includes","v","v2","browserProtocols","isGdalVfsUri","href","toAbsolute","baseUrl","stringify","normalizeUri","noParams","replace","uri","URI","is","baseUri","baseUriPath","path","endsWith","absoluteTo","normalize","query","fragment","toString","geojsonMediaType","stacMediaTypes","browserImageTypes","cogMediaTypes","geotiffMediaTypes","isMediaType","allowedTypes","allowUndefined","toLowerCase","isStacMediaType","STACReference","context","super","_context","getContext","canBrowserDisplayImage","protocol","extension","suffix","isType","types","isGeoTIFF","isCOG","isHTTP","Link","fromLinks","links","link","STACHypermedia","absoluteUrl","_url","self","getSelfLink","setAbsoluteUrl","url","getStacLinksWithRel","rel","getLinksWithRels","getStacLinkWithRel","getLinks","getLinkWithRel","find","rels","getLinksWithOtherRels","getRootLink","getParentLink","APICollection","getAll","Asset","_key","isDefintion","getKey","getBands","findVisualBands","rgb","red","green","blue","index","parseInt","common_name","complete","values","every","o","findBand","value","property","findIndex","getBand","getMinMaxValues","stats","minimum","maximum","isComplete","statistics","histogram","min","classification","reduce","cls","data_type","getNoDataValues","nodata","file","Boolean","NaN","Infinity","hasRole","roles","includeKey","role","fromAssets","assets","newAssets","STAC","getTemporalExtent","getTemporalExtents","getIcons","img","getThumbnails","browserOnly","prefer","thumbnails","getAssetsWithRoles","sort","a","getDefaultGeoTIFF","httpOnly","cogOnly","scores","rankGeoTIFFs","asset","roleScores","additionalCriteria","visual","thumbnail","overview","getAssetsByTypes","entries","score","result","b","findVisualAssets","names","getAssets","getAsset","getAssetWithRole","equals","other","id","CatalogLike","getSearchLink","method","getApiCollectionsLink","getApiItemsLink","getChildLinks","getItemLinks","Catalog","isoToDate","strParts","match","dt","slice","n","Date","UTC","error","centerDateTime","start","end","valueOf","unionDateTime","list","base","fn","toObject","bbox","hasZ","west","east","south","north","bboxToCoords","bboxes","isBoundingBox","coordinates","isAntimeridianBoundingBox","geometry","properties","some","unionBoundingBox","extrema","Collection","item_assets","geojson","getRawBoundingBoxes","extents","extent","spatial","temporal","interval","datetime","getSummary","summaries","eo","raster","all","CollectionCollection","collections","collection","features","Item","getDateTime","start_datetime","end_datetime","dates","getCollectionLink","ItemCollection","feature","item","create","migrate","updateVersionNumber","license"],"sourceRoot":""}